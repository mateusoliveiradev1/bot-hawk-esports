import { SlashCommandBuilder, PermissionFlagsBits, ChannelType, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } from 'discord.js';
import { Command, CommandCategory } from '../../types/command';
import { ExtendedClient } from '../../types/client';
import { Logger } from '../../utils/logger';

/**
 * Bootstrap command - Automatically sets up the server with channels, roles, and content
 */
const bootstrap: Command = {
  data: new SlashCommandBuilder()
    .setName('bootstrap')
    .setDescription('üöÄ Configura automaticamente o servidor com canais, cargos e conte√∫dos')
    .addStringOption(option =>
      option.setName('mode')
        .setDescription('Modo de configura√ß√£o')
        .setRequired(false)
        .addChoices(
          { name: 'üîß Completo (Recomendado)', value: 'full' },
          { name: 'üèóÔ∏è Configura√ß√£o Inicial', value: 'initial' },
          { name: 'üìù Apenas Canais', value: 'channels' },
          { name: 'üë• Apenas Cargos', value: 'roles' },
          { name: '‚öôÔ∏è Apenas Configura√ß√µes', value: 'config' },
        ),
    )
    .setDefaultMemberPermissions(PermissionFlagsBits.Administrator)
    .setDMPermission(false) as SlashCommandBuilder,
  
  category: CommandCategory.ADMIN,
  cooldown: 60,
  permissions: ['Administrator'],
  
  async execute(interaction, client: ExtendedClient) {
    const logger = new Logger();
    const mode = (interaction as any).options?.getString('mode') || 'full';
    
    try {
      await interaction.deferReply({ ephemeral: true });
      
      const guild = interaction.guild!;
      const setupResults: string[] = [];
      
      // Verificar se j√° foi configurado
      const existingConfig = await client.database.client.guildConfig.findUnique({
        where: { guildId: guild.id },
      });
      
      const configData = existingConfig?.config as any;
      if (configData?.isSetup && mode === 'full') {
        const confirmEmbed = new EmbedBuilder()
          .setTitle('‚ö†Ô∏è Servidor j√° configurado')
          .setDescription('Este servidor j√° foi configurado anteriormente. Deseja reconfigurar?')
          .setColor('#FFA500')
          .addFields(
            { name: 'üìÖ Configurado em', value: existingConfig ? `<t:${Math.floor(existingConfig.createdAt.getTime() / 1000)}:F>` : 'N√£o dispon√≠vel', inline: true },
            { name: 'üîß √öltima atualiza√ß√£o', value: existingConfig ? `<t:${Math.floor(existingConfig.updatedAt.getTime() / 1000)}:R>` : 'N√£o dispon√≠vel', inline: true },
          );
        
        const confirmRow = new ActionRowBuilder<ButtonBuilder>()
          .addComponents(
            new ButtonBuilder()
              .setCustomId('bootstrap_confirm')
              .setLabel('Sim, reconfigurar')
              .setStyle(ButtonStyle.Danger)
              .setEmoji('üîÑ'),
            new ButtonBuilder()
              .setCustomId('bootstrap_cancel')
              .setLabel('Cancelar')
              .setStyle(ButtonStyle.Secondary)
              .setEmoji('‚ùå'),
          );
        
        await interaction.editReply({
          embeds: [confirmEmbed],
          components: [confirmRow],
        });
        
        // Aguardar confirma√ß√£o
        const filter = (i: any) => i.user.id === interaction.user.id;
        const collector = interaction.channel?.createMessageComponentCollector({ filter, time: 30000 });
        
        collector?.on('collect', async (i) => {
          if (i.customId === 'bootstrap_cancel') {
            await i.update({
              embeds: [new EmbedBuilder().setTitle('‚ùå Configura√ß√£o cancelada').setColor('#FF0000')],
              components: [],
            });
            return;
          }
          
          if (i.customId === 'bootstrap_confirm') {
            await i.update({
              embeds: [new EmbedBuilder().setTitle('üîÑ Reconfigurando servidor...').setColor('#0099FF')],
              components: [],
            });
            
            // Continuar com a configura√ß√£o
            await performBootstrap();
          }
        });
        
        collector?.on('end', (collected) => {
          if (collected.size === 0) {
            interaction.editReply({
              embeds: [new EmbedBuilder().setTitle('‚è∞ Tempo esgotado').setColor('#FF0000')],
              components: [],
            });
          }
        });
        
        return;
      }
      
      const performBootstrap = async () => {
        const progressEmbed = new EmbedBuilder()
          .setTitle('üöÄ Configurando servidor...')
          .setDescription('Por favor, aguarde enquanto configuramos tudo para voc√™.')
          .setColor('#0099FF')
          .setFooter({ text: 'Isso pode levar alguns minutos' });
        
        await interaction.editReply({ embeds: [progressEmbed], components: [] });
        
        // 1. Criar/Atualizar cargos
        if (mode === 'full' || mode === 'roles') {
          setupResults.push(await setupRoles(guild));
        }
        
        // 2. Criar/Atualizar canais
        if (mode === 'full' || mode === 'channels') {
          setupResults.push(await setupChannels(guild, 'full'));
        } else if (mode === 'initial') {
          setupResults.push(await setupChannels(guild, 'initial'));
        }
        
        // 3. Configurar banco de dados
        if (mode === 'full' || mode === 'config') {
          setupResults.push(await setupDatabase(guild, client));
        }
        
        // 4. Configurar permiss√µes
        if (mode === 'full') {
          setupResults.push(await setupPermissions(guild));
        }
        
        // 5. Enviar mensagens de boas-vindas
        if (mode === 'full') {
          setupResults.push(await setupWelcomeMessages(guild));
        }
        
        // Resultado final
        const successEmbed = new EmbedBuilder()
          .setTitle('‚úÖ Servidor configurado com sucesso!')
          .setDescription('Todas as configura√ß√µes foram aplicadas. Seu servidor est√° pronto para uso!')
          .setColor('#00FF00')
          .addFields(
            { name: 'üìä Resultados', value: setupResults.join('\n'), inline: false },
            { name: 'üéØ Pr√≥ximos passos', value: '‚Ä¢ Use `/help` para ver todos os comandos\n‚Ä¢ Configure as notifica√ß√µes com `/config`\n‚Ä¢ Adicione usu√°rios PUBG com `/register`', inline: false },
          )
          .setFooter({ text: `Configurado por ${interaction.user.tag}`, iconURL: interaction.user.displayAvatarURL() })
          .setTimestamp();
        
        await interaction.editReply({ embeds: [successEmbed] });
        
        logger.info(`Server ${guild.name} (${guild.id}) bootstrapped by ${interaction.user.tag}`);
      };
      
      await performBootstrap();
      
    } catch (error) {
      logger.error('Bootstrap command error:', error);
      
      const errorEmbed = new EmbedBuilder()
        .setTitle('‚ùå Erro na configura√ß√£o')
        .setDescription('Ocorreu um erro durante a configura√ß√£o do servidor. Verifique as permiss√µes do bot.')
        .setColor('#FF0000')
        .addFields(
          { name: 'üîç Detalhes', value: error instanceof Error ? error.message : 'Erro desconhecido' },
        );
      
      await interaction.editReply({ embeds: [errorEmbed] });
    }
  },
};

/**
 * Setup server roles
 */
async function setupRoles(guild: any): Promise<string> {
  const logger = new Logger();
  let created = 0;
  let updated = 0;
  
  const roles = [
    // PUBG Ranks
    { name: 'üèÜ Conqueror', color: '#FFD700', position: 20 },
    { name: 'üíé Ace', color: '#B9F2FF', position: 19 },
    { name: 'üëë Crown', color: '#DDA0DD', position: 18 },
    { name: 'üíç Diamond', color: '#87CEEB', position: 17 },
    { name: 'ü•â Platinum', color: '#E5E4E2', position: 16 },
    { name: 'ü•à Gold', color: '#FFD700', position: 15 },
    { name: 'ü•á Silver', color: '#C0C0C0', position: 14 },
    { name: 'üî∞ Bronze', color: '#CD7F32', position: 13 },
    
    // Internal Ranks
    { name: '‚≠ê Lenda', color: '#FF6B6B', position: 12 },
    { name: 'üî• Mestre', color: '#4ECDC4', position: 11 },
    { name: '‚ö° Expert', color: '#45B7D1', position: 10 },
    { name: 'üéØ Avan√ßado', color: '#96CEB4', position: 9 },
    { name: 'üìà Intermedi√°rio', color: '#FFEAA7', position: 8 },
    { name: 'üå± Iniciante', color: '#DDA0DD', position: 7 },
    
    // Special Roles
    { name: 'üéñÔ∏è MVP', color: '#FF0000', position: 25 },
    { name: 'üèÖ Top Player', color: '#FFA500', position: 24 },
    { name: 'üéÆ Gamer Ativo', color: '#00FF00', position: 6 },
    { name: 'üéµ Music Lover', color: '#9B59B6', position: 5 },
    { name: 'üé¨ Clip Master', color: '#E74C3C', position: 4 },
    { name: 'üß† Quiz Champion', color: '#3498DB', position: 3 },
    { name: '‚úÖ Verificado', color: '#2ECC71', position: 2 },
    { name: 'üëã Novo Membro', color: '#95A5A6', position: 1 },
  ];
  
  for (const roleData of roles) {
    try {
      const existingRole = guild.roles.cache.find((r: any) => r.name === roleData.name);
      
      if (existingRole) {
        await existingRole.edit({
          color: roleData.color,
          position: roleData.position,
        });
        updated++;
      } else {
        await guild.roles.create({
          name: roleData.name,
          color: roleData.color,
          position: roleData.position,
          mentionable: false,
        });
        created++;
      }
    } catch (error) {
      logger.error(`Error creating/updating role ${roleData.name}:`, error);
    }
  }
  
  return `üé≠ **Cargos**: ${created} criados, ${updated} atualizados`;
}

// Interface for channel configuration
interface ChannelConfig {
  name: string;
  type: ChannelType;
  category?: string;
  topic?: string;
  position?: number;
  userLimit?: number;
}

/**
 * Setup server channels
 */
async function setupChannels(guild: any, mode: string = 'full'): Promise<string> {
  const logger = new Logger();
  let created = 0;
  let updated = 0;
  
  // Define canais essenciais para configura√ß√£o inicial
  const essentialChannels: ChannelConfig[] = [
    // Categories
    { name: 'üìã INFORMA√á√ïES', type: ChannelType.GuildCategory, position: 0 },
    { name: 'üí¨ CHAT GERAL', type: ChannelType.GuildCategory, position: 1 },
    
    // Essential information channels
    { name: 'üìú-regras', type: ChannelType.GuildText, category: 'üìã INFORMA√á√ïES', topic: 'üìã Leia as regras do servidor antes de participar das atividades' },
    { name: 'üì¢-an√∫ncios', type: ChannelType.GuildText, category: 'üìã INFORMA√á√ïES', topic: 'üì¢ An√∫ncios importantes e atualiza√ß√µes do servidor' },
    { name: 'üëã-boas-vindas', type: ChannelType.GuildText, category: 'üí¨ CHAT GERAL', topic: 'üëã Canal de boas-vindas para novos membros' },
    
    // Essential general chat
    { name: 'üí¨-geral', type: ChannelType.GuildText, category: 'üí¨ CHAT GERAL', topic: 'üí¨ Conversa geral da comunidade' },
    { name: 'ü§ñ-comandos', type: ChannelType.GuildText, category: 'üí¨ CHAT GERAL', topic: 'ü§ñ Use os comandos do bot aqui para n√£o poluir outros canais' },
  ];
  
  // Define todos os canais para configura√ß√£o completa
  const allChannels: ChannelConfig[] = [
    // Categories
    { name: 'üìã INFORMA√á√ïES', type: ChannelType.GuildCategory, position: 0 },
    { name: 'üí¨ CHAT GERAL', type: ChannelType.GuildCategory, position: 1 },
    { name: 'üéÆ PUBG', type: ChannelType.GuildCategory, position: 2 },
    { name: 'üéµ M√öSICA', type: ChannelType.GuildCategory, position: 3 },
    { name: 'üéØ JOGOS & QUIZZES', type: ChannelType.GuildCategory, position: 4 },
    { name: 'üé¨ CLIPS & HIGHLIGHTS', type: ChannelType.GuildCategory, position: 5 },
    { name: 'üîß ADMINISTRA√á√ÉO', type: ChannelType.GuildCategory, position: 6 },
    
    // Information channels
    { name: 'üìú-regras', type: ChannelType.GuildText, category: 'üìã INFORMA√á√ïES', topic: 'üìã Leia as regras do servidor antes de participar das atividades' },
    { name: 'üì¢-an√∫ncios', type: ChannelType.GuildText, category: 'üìã INFORMA√á√ïES', topic: 'üì¢ An√∫ncios importantes e atualiza√ß√µes do servidor' },
    { name: 'üéâ-eventos', type: ChannelType.GuildText, category: 'üìã INFORMA√á√ïES', topic: 'üéâ Eventos especiais e competi√ß√µes da comunidade' },
    { name: 'üìä-rankings', type: ChannelType.GuildText, category: 'üìã INFORMA√á√ïES', topic: 'üìä Rankings e estat√≠sticas dos jogadores' },
    
    // General chat
    { name: 'üí¨-geral', type: ChannelType.GuildText, category: 'üí¨ CHAT GERAL', topic: 'üí¨ Conversa geral da comunidade' },
    { name: 'ü§ñ-comandos', type: ChannelType.GuildText, category: 'üí¨ CHAT GERAL', topic: 'ü§ñ Use os comandos do bot aqui para n√£o poluir outros canais' },
    { name: 'üëã-boas-vindas', type: ChannelType.GuildText, category: 'üí¨ CHAT GERAL', topic: 'üëã Canal de boas-vindas para novos membros' },
    
    // PUBG channels
    { name: 'üéÆ-pubg-geral', type: ChannelType.GuildText, category: 'üéÆ PUBG', topic: 'üéÆ Discuss√µes gerais sobre PUBG, dicas, estrat√©gias e novidades do jogo' },
    { name: 'üìà-stats-pubg', type: ChannelType.GuildText, category: 'üéÆ PUBG', topic: 'üìà Compartilhe suas estat√≠sticas, progresso e conquistas no PUBG' },
    { name: 'üèÜ-ranking-pubg', type: ChannelType.GuildText, category: 'üéÆ PUBG', topic: 'üèÜ Rankings oficiais, temporadas e competi√ß√µes do servidor' },
    { name: 'üë•-procurar-squad', type: ChannelType.GuildText, category: 'üéÆ PUBG', topic: 'üë• Encontre parceiros para jogar, forme squads e organize partidas' },
    { name: 'üéØ-scrims', type: ChannelType.GuildText, category: 'üéÆ PUBG', topic: 'üéØ Organize e participe de scrimmages e treinos competitivos' },
    
    // Music channels
    { name: 'üéµ-m√∫sica', type: ChannelType.GuildText, category: 'üéµ M√öSICA', topic: 'üéµ Comandos de m√∫sica, pedidos de m√∫sicas e controle do bot de m√∫sica' },
    { name: 'üéß-queue', type: ChannelType.GuildText, category: 'üéµ M√öSICA', topic: 'üéß Visualize a fila de reprodu√ß√£o atual e pr√≥ximas m√∫sicas' },
    { name: 'üîä-m√∫sica-voice', type: ChannelType.GuildVoice, category: 'üéµ M√öSICA' },
    
    // Games & Quizzes
    { name: 'üéØ-mini-games', type: ChannelType.GuildText, category: 'üéØ JOGOS & QUIZZES', topic: 'üéØ Mini-games divertidos, desafios r√°pidos e competi√ß√µes casuais da comunidade' },
    { name: 'üß†-quizzes', type: ChannelType.GuildText, category: 'üéØ JOGOS & QUIZZES', topic: 'üß† Quizzes sobre PUBG, jogos em geral e conhecimentos diversos' },
    { name: 'üèÖ-desafios', type: ChannelType.GuildText, category: 'üéØ JOGOS & QUIZZES', topic: 'üèÖ Desafios especiais, miss√µes da comunidade e competi√ß√µes tem√°ticas' },
    { name: 'üéñÔ∏è-badges', type: ChannelType.GuildText, category: 'üéØ JOGOS & QUIZZES', topic: 'üéñÔ∏è Sistema de conquistas, badges especiais e recompensas da comunidade' },
    
    // Clips & Highlights
    { name: 'üé¨-clips', type: ChannelType.GuildText, category: 'üé¨ CLIPS & HIGHLIGHTS', topic: 'üé¨ Compartilhe seus melhores clips, jogadas √©picas e momentos engra√ßados' },
    { name: '‚≠ê-highlights', type: ChannelType.GuildText, category: 'üé¨ CLIPS & HIGHLIGHTS', topic: '‚≠ê Os melhores highlights da comunidade, jogadas profissionais e momentos hist√≥ricos' },
    { name: 'üìä-clip-rankings', type: ChannelType.GuildText, category: 'üé¨ CLIPS & HIGHLIGHTS', topic: 'üìä Rankings dos melhores clips, vota√ß√µes da comunidade e competi√ß√µes de conte√∫do' },
    
    // Administration
    { name: 'üîß-admin', type: ChannelType.GuildText, category: 'üîß ADMINISTRA√á√ÉO', topic: 'üîß Canal geral da administra√ß√£o para discuss√µes internas e coordena√ß√£o da equipe' },
    { name: 'üìù-logs', type: ChannelType.GuildText, category: 'üîß ADMINISTRA√á√ÉO', topic: 'üìù Logs autom√°ticos do servidor: entradas, sa√≠das, modera√ß√£o e atividades importantes' },
    { name: 'üé´-tickets', type: ChannelType.GuildText, category: 'üîß ADMINISTRA√á√ÉO', topic: 'üé´ Sistema de tickets para suporte, d√∫vidas e solicita√ß√µes dos membros' },
    
    // Voice channels
    { name: 'üéÆ Squad 1', type: ChannelType.GuildVoice, category: 'üéÆ PUBG', userLimit: 4 },
    { name: 'üéÆ Squad 2', type: ChannelType.GuildVoice, category: 'üéÆ PUBG', userLimit: 4 },
    { name: 'üéÆ Squad 3', type: ChannelType.GuildVoice, category: 'üéÆ PUBG', userLimit: 4 },
    { name: 'üéÆ Squad 4', type: ChannelType.GuildVoice, category: 'üéÆ PUBG', userLimit: 4 },
    { name: 'üéØ Scrims & Treinos', type: ChannelType.GuildVoice, category: 'üéÆ PUBG', userLimit: 10 },
    { name: 'üèÜ Competitivo', type: ChannelType.GuildVoice, category: 'üéÆ PUBG', userLimit: 8 },
    { name: 'üí¨ Chat Geral', type: ChannelType.GuildVoice, category: 'üí¨ CHAT GERAL', userLimit: 15 },
    { name: 'üéµ M√∫sica & Chill', type: ChannelType.GuildVoice, category: 'üéµ M√öSICA', userLimit: 20 },
    { name: 'üéÆ Outros Jogos', type: ChannelType.GuildVoice, category: 'üéÆ JOGOS', userLimit: 8 },
  ];
  
  // Choose which channels to create based on mode
  const channels = mode === 'essential' ? essentialChannels : allChannels;
  const categories = new Map<string, any>();
  
  // Create categories first
  for (const channelData of channels.filter(c => c.type === ChannelType.GuildCategory)) {
    try {
      const existingCategory = guild.channels.cache.find((c: any) => c.name === channelData.name && c.type === ChannelType.GuildCategory);
      
      if (!existingCategory) {
        const category = await guild.channels.create({
          name: channelData.name,
          type: channelData.type,
          position: channelData.position,
        });
        categories.set(channelData.name, category);
        created++;
      } else {
        categories.set(channelData.name, existingCategory);
        updated++;
      }
    } catch (error) {
      logger.error(`Error creating category ${channelData.name}:`, error);
    }
  }
  
  // Create other channels
  for (const channelData of channels.filter(c => c.type !== ChannelType.GuildCategory)) {
    try {
      const existingChannel = guild.channels.cache.find((c: any) => c.name === channelData.name);
      
      if (!existingChannel) {
        const parent = channelData.category ? categories.get(channelData.category) : null;
        
        const channelOptions: any = {
          name: channelData.name,
          type: channelData.type,
          parent: parent?.id,
        };
        
        // Add topic for text channels
        if (channelData.topic) {
          channelOptions.topic = channelData.topic;
        }
        
        // Add user limit for voice channels
        if (channelData.userLimit && channelData.type === ChannelType.GuildVoice) {
          channelOptions.userLimit = channelData.userLimit;
        }
        
        await guild.channels.create(channelOptions);
        created++;
      } else {
        updated++;
      }
    } catch (error) {
      logger.error(`Error creating channel ${channelData.name}:`, error);
    }
  }
  
  return `üì∫ **Canais**: ${created} criados, ${updated} atualizados`;
}

/**
 * Setup database configuration
 */
async function setupDatabase(guild: any, client: ExtendedClient): Promise<string> {
  try {
    const guildConfig = await client.database.client.guildConfig.upsert({
      where: { guildId: guild.id },
      update: {
        config: JSON.stringify({
          isSetup: true,
          welcomeChannelId: guild.channels.cache.find((c: any) => c.name === 'üëã-boas-vindas')?.id,
          logsChannelId: guild.channels.cache.find((c: any) => c.name === 'üìù-logs')?.id,
          musicChannelId: guild.channels.cache.find((c: any) => c.name === 'üéµ-m√∫sica')?.id,
          rankingChannelId: guild.channels.cache.find((c: any) => c.name === 'üìä-rankings')?.id,
          clipsChannelId: guild.channels.cache.find((c: any) => c.name === 'üé¨-clips')?.id,
          autoRoleEnabled: true,
          welcomeMessageEnabled: true,
          rankingNotificationsEnabled: true,
          badgeNotificationsEnabled: true,
        }),
      },
      create: {
        guildId: guild.id,
        config: JSON.stringify({
          isSetup: true,
          welcomeChannelId: guild.channels.cache.find((c: any) => c.name === 'üëã-boas-vindas')?.id,
          logsChannelId: guild.channels.cache.find((c: any) => c.name === 'üìù-logs')?.id,
          musicChannelId: guild.channels.cache.find((c: any) => c.name === 'üéµ-m√∫sica')?.id,
          rankingChannelId: guild.channels.cache.find((c: any) => c.name === 'üìä-rankings')?.id,
          clipsChannelId: guild.channels.cache.find((c: any) => c.name === 'üé¨-clips')?.id,
          autoRoleEnabled: true,
          welcomeMessageEnabled: true,
          rankingNotificationsEnabled: true,
          badgeNotificationsEnabled: true,
        }),
      },
    });
    
    // Create guild entry
    await client.database.guilds.upsert({
      id: guild.id,
      name: guild.name,
      ownerId: guild.ownerId,
    });
    
    return 'üíæ **Banco de dados**: Configurado com sucesso';
  } catch (error) {
    return 'üíæ **Banco de dados**: Erro na configura√ß√£o';
  }
}

/**
 * Setup channel permissions
 */
async function setupPermissions(guild: any): Promise<string> {
  const logger = new Logger();
  let configured = 0;
  
  try {
    const everyoneRole = guild.roles.everyone;
    const verificadoRole = guild.roles.cache.find((r: any) => r.name === '‚úÖ Verificado');
    
    // Configure admin channels permissions
    const adminChannels = guild.channels.cache.filter((c: any) => 
      c.name.includes('admin') || c.name.includes('logs') || c.name.includes('tickets'),
    );
    
    for (const channel of adminChannels.values()) {
      await channel.permissionOverwrites.edit(everyoneRole, {
        ViewChannel: false,
      });
      configured++;
    }
    
    // Configure verification requirement for main channels
    if (verificadoRole) {
      const mainChannels = guild.channels.cache.filter((c: any) => 
        !c.name.includes('admin') && !c.name.includes('logs') && 
        !c.name.includes('boas-vindas') && c.type !== ChannelType.GuildCategory,
      );
      
      for (const channel of mainChannels.values()) {
        await channel.permissionOverwrites.edit(everyoneRole, {
          SendMessages: false,
          Connect: false,
        });
        
        await channel.permissionOverwrites.edit(verificadoRole, {
          SendMessages: true,
          Connect: true,
        });
        configured++;
      }
    }
    
    return `üîí **Permiss√µes**: ${configured} canais configurados`;
  } catch (error) {
    logger.error('Error setting up permissions:', error);
    return 'üîí **Permiss√µes**: Erro na configura√ß√£o';
  }
}

/**
 * Setup welcome messages
 */
async function setupWelcomeMessages(guild: any): Promise<string> {
  try {
    const welcomeChannel = guild.channels.cache.find((c: any) => c.name === 'üëã-boas-vindas');
    const rulesChannel = guild.channels.cache.find((c: any) => c.name === 'üìú-regras');
    const commandsChannel = guild.channels.cache.find((c: any) => c.name === 'ü§ñ-comandos');
    
    if (welcomeChannel) {
      const welcomeEmbed = new EmbedBuilder()
        .setTitle('ü¶Ö Bem-vindo ao Hawk Esports!')
        .setDescription('üéâ **Seja bem-vindo √† maior comunidade de PUBG do Discord!**\n\nüèÜ Aqui voc√™ encontrar√°:\n‚Ä¢ Rankings competitivos e estat√≠sticas detalhadas\n‚Ä¢ Scrimmages e treinos organizados\n‚Ä¢ Sistema de badges e conquistas\n‚Ä¢ Comunidade ativa e acolhedora\n‚Ä¢ Suporte completo para melhorar seu gameplay')
        .setColor('#FFD700')
        .addFields(
          { name: 'üìã 1¬∫ Passo - Leia as Regras', value: `${rulesChannel || '#üìú-regras'}\nConhe√ßa nossas diretrizes para uma conviv√™ncia harmoniosa`, inline: true },
          { name: 'üéÆ 2¬∫ Passo - Registre-se', value: '`/register`\nCadastre seu nick do PUBG e desbloqueie todos os recursos', inline: true },
          { name: 'ü§ñ 3¬∫ Passo - Explore', value: `${commandsChannel || '#ü§ñ-comandos'}\nDescubra todos os comandos dispon√≠veis`, inline: true },
          { name: 'üéØ Recursos Principais', value: '‚Ä¢ `/stats` - Suas estat√≠sticas\n‚Ä¢ `/ranking` - Rankings do servidor\n‚Ä¢ `/play` - M√∫sica no chat de voz\n‚Ä¢ `/scrim` - Organize treinos', inline: true },
          { name: 'üèÖ Sistema de Badges', value: 'Ganhe badges especiais por:\n‚Ä¢ Participa√ß√£o ativa\n‚Ä¢ Conquistas no PUBG\n‚Ä¢ Contribui√ß√µes √† comunidade', inline: true },
          { name: 'üí¨ Canais Importantes', value: '‚Ä¢ üéÆ-pubg-geral - Chat principal\n‚Ä¢ üë•-procurar-squad - Encontre parceiros\n‚Ä¢ üé¨-clips - Compartilhe jogadas', inline: true }
        )
        .setFooter({ text: 'Hawk Esports - Elevando seu n√≠vel no PUBG desde 2024' })
        .setTimestamp();
      
      await welcomeChannel.send({ embeds: [welcomeEmbed] });
    }
    
    if (rulesChannel) {
      const rulesEmbed = new EmbedBuilder()
        .setTitle('üìú Regras do Hawk Esports')
        .setDescription('üõ°Ô∏è **Para manter nossa comunidade saud√°vel, divertida e competitiva, todos devem seguir estas diretrizes:**\n\n*O n√£o cumprimento pode resultar em advert√™ncias, mute tempor√°rio ou banimento.*')
        .setColor('#FF6B6B')
        .addFields(
          { name: '1Ô∏è‚É£ Respeito e Cordialidade', value: '‚Ä¢ Trate todos os membros com respeito\n‚Ä¢ N√£o use linguagem ofensiva, discriminat√≥ria ou t√≥xica\n‚Ä¢ Evite discuss√µes desnecess√°rias e conflitos\n‚Ä¢ Seja acolhedor com novos membros', inline: false },
          { name: '2Ô∏è‚É£ Comunica√ß√£o Adequada', value: '‚Ä¢ N√£o fa√ßa spam em canais de texto ou voz\n‚Ä¢ Use os canais apropriados para cada tipo de conte√∫do\n‚Ä¢ Evite CAPS LOCK excessivo\n‚Ä¢ N√£o mencione membros desnecessariamente', inline: false },
          { name: '3Ô∏è‚É£ Conte√∫do Apropriado', value: '‚Ä¢ Mantenha o conte√∫do relacionado ao prop√≥sito do canal\n‚Ä¢ N√£o compartilhe conte√∫do NSFW ou inadequado\n‚Ä¢ Evite temas pol√™micos como pol√≠tica e religi√£o\n‚Ä¢ Respeite os direitos autorais ao compartilhar conte√∫do', inline: false },
          { name: '4Ô∏è‚É£ Fair Play no PUBG', value: '‚Ä¢ **ZERO TOLER√ÇNCIA** para cheats, hacks ou exploits\n‚Ä¢ N√£o promova ou discuta m√©todos de trapa√ßa\n‚Ä¢ Jogue limpo em scrims e competi√ß√µes\n‚Ä¢ Reporte comportamentos suspeitos √† administra√ß√£o', inline: false },
          { name: '5Ô∏è‚É£ Sistema de Verifica√ß√£o', value: '‚Ä¢ Use `/register` para cadastrar seu nick do PUBG\n‚Ä¢ Mantenha suas informa√ß√µes atualizadas\n‚Ä¢ N√£o crie contas falsas ou m√∫ltiplas\n‚Ä¢ A verifica√ß√£o √© obrigat√≥ria para acesso completo', inline: false },
          { name: '6Ô∏è‚É£ Comportamento em Voz', value: '‚Ä¢ Mantenha um volume adequado no microfone\n‚Ä¢ N√£o reproduza m√∫sica ou sons irritantes\n‚Ä¢ Respeite quando outros estiverem falando\n‚Ä¢ Use push-to-talk se houver ru√≠do de fundo', inline: false },
          { name: '‚öñÔ∏è Sistema de Puni√ß√µes', value: 'üü° **Advert√™ncia** - Primeira infra√ß√£o leve\nüü† **Mute Tempor√°rio** - Reincid√™ncia ou infra√ß√£o m√©dia\nüî¥ **Banimento** - Infra√ß√µes graves ou m√∫ltiplas reincid√™ncias\n\n*Todas as puni√ß√µes s√£o registradas e podem ser contestadas via ticket.*', inline: false }
        )
        .setFooter({ text: 'Hawk Esports - Regras atualizadas em ' + new Date().toLocaleDateString('pt-BR') });
      
      await rulesChannel.send({ embeds: [rulesEmbed] });
    }
    
    return 'üí¨ **Mensagens**: Enviadas com sucesso';
  } catch (error) {
    return 'üí¨ **Mensagens**: Erro no envio';
  }
}

export default bootstrap;