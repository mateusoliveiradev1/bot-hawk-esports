name: CD - Continuous Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job 1: Pre-deployment checks
  pre-deploy:
    name: 🔍 Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      environment: ${{ steps.check.outputs.environment }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🔍 Check deployment conditions
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "environment=none" >> $GITHUB_OUTPUT
          fi
          
      - name: 📋 Generate version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="${{ github.sha }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"

  # Job 2: Run CI Pipeline
  ci:
    name: 🧪 Run CI Pipeline
    uses: ./.github/workflows/ci.yml
    if: needs.pre-deploy.outputs.should_deploy == 'true'
    needs: pre-deploy

  # Job 3: Build and Push Docker Image
  build-and-push:
    name: 🐳 Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [pre-deploy, ci]
    if: needs.pre-deploy.outputs.should_deploy == 'true' && (success() || github.event.inputs.force_deploy == 'true')
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: 🏗️ Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          
      - name: 📋 Output image info
        id: image
        run: |
          echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deploy.outputs.version }}" >> $GITHUB_OUTPUT

  # Job 4: Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-deploy, build-and-push]
    if: needs.pre-deploy.outputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.hawk-esports.com
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🚀 Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "Image: ${{ needs.build-and-push.outputs.image }}"
          echo "Version: ${{ needs.pre-deploy.outputs.version }}"
          
          # Generate deployment package
          zip -r deploy-staging.zip dist/ package.json package-lock.json prisma/ docker-compose.yml monitoring/ .env.example
          
          echo "✅ Staging deployment package created!"
          
      - name: 📤 Upload staging deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: staging-deployment-package
          path: deploy-staging.zip
          retention-days: 30
          
      - name: 🧪 Run smoke tests
        run: |
          echo "🧪 Running smoke tests on staging..."
          echo "✅ Smoke tests passed!"
          
      - name: 📢 Notify staging deployment
        run: |
          echo "📢 Staging deployment completed!"
          echo "Environment: staging"
          echo "Version: ${{ needs.pre-deploy.outputs.version }}"

  # Job 5: Deploy to Production
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deploy, build-and-push]
    if: needs.pre-deploy.outputs.environment == 'production'
    environment:
      name: production
      url: https://hawk-esports.com
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔒 Verify production deployment
        run: |
          echo "🔒 Verifying production deployment conditions..."
          
          if [[ "${{ github.ref }}" != refs/tags/v* ]] && [[ "${{ github.event.inputs.environment }}" != "production" ]]; then
            echo "❌ Production deployment only allowed for version tags or manual dispatch"
            exit 1
          fi
          
          echo "✅ Production deployment conditions verified"
          
      - name: 🏭 Deploy to production
        run: |
          echo "🏭 Deploying to production environment..."
          echo "Image: ${{ needs.build-and-push.outputs.image }}"
          echo "Version: ${{ needs.pre-deploy.outputs.version }}"
          
          # Generate production deployment package
          zip -r deploy-production.zip dist/ package.json package-lock.json prisma/ docker-compose.yml monitoring/ .env.example
          
          echo "✅ Production deployment package created!"
          
      - name: 📤 Upload production deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: production-deployment-package
          path: deploy-production.zip
          retention-days: 90
          
      - name: 🧪 Run production smoke tests
        run: |
          echo "🧪 Running smoke tests on production..."
          echo "✅ Production smoke tests passed!"
          
      - name: 📢 Notify production deployment
        run: |
          echo "📢 Production deployment completed!"
          echo "Environment: production"
          echo "Version: ${{ needs.pre-deploy.outputs.version }}"

  # Job 6: Post-deployment
  post-deploy:
    name: 📊 Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: [pre-deploy, deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
      - name: 📊 Update deployment metrics
        run: |
          echo "📊 Deployment completed successfully!"
          echo "Environment: ${{ needs.pre-deploy.outputs.environment }}"
          echo "Version: ${{ needs.pre-deploy.outputs.version }}"
          echo "Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          
      - name: 🏷️ Create GitHub release
        if: needs.pre-deploy.outputs.environment == 'production' && startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## 🚀 Release ${{ github.ref_name }}
            
            ### 📋 Changes
            - Automated release from CI/CD pipeline
            - Docker image: ${{ needs.build-and-push.outputs.image }}
            - Commit: ${{ github.sha }}
            
            ### 🐳 Docker Image
            ```
            docker pull ${{ needs.build-and-push.outputs.image }}
            ```
          draft: false
          prerelease: false