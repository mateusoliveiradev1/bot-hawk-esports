name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'
  POSTGRES_DB: hawk_esports_test
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  REDIS_URL: redis://localhost:6379

jobs:
  # Job 1: Lint and Code Quality
  lint:
    name: 🔍 Lint & Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📥 Install dependencies
      run: npm ci
      
    - name: 📝 TypeScript type checking
      run: npx tsc --noEmit
      
    - name: 🔍 Run ESLint
      run: npx eslint . --ext .ts,.js
      
    - name: 🎨 Check Prettier formatting
      run: npm run format:check || npx prettier --check .
      
    - name: 📝 Check commit message format
      if: github.event_name == 'push'
      run: |
        # Verificar se o último commit segue Conventional Commits
        npx commitlint --from HEAD~1 --to HEAD --verbose

  # Job 2: Unit Tests
  test:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📥 Install dependencies
      run: npm ci
      
    - name: 🗄️ Setup test database
      run: |
        npm run db:generate || echo "No db:generate script found"
        npm run db:push || echo "No db:push script found"
      env:
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        
    - name: 🧪 Run tests
      run: npm test
      env:
        DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        REDIS_URL: ${{ env.REDIS_URL }}
        NODE_ENV: test

  # Job 3: Build Project
  build:
    name: 🏗️ Build Project
    needs: [lint, test]
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📥 Install dependencies
      run: npm ci
      
    - name: 🏗️ Build project
      run: npm run build
      
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 7

  # Job 4: Docker Build
  docker:
    name: 🐳 Docker Build
    needs: [lint, test]
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🏗️ Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: hawk-esports-bot:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🧪 Test Docker image
      run: |
        docker run --rm --name test-container -d \
          -e NODE_ENV=test \
          hawk-esports-bot:${{ github.sha }}
        
        # Wait for container to start
        sleep 10
        
        # Check if container is running
        docker ps | grep test-container || echo "Container not running"
        
        # Stop container
        docker stop test-container || echo "Container already stopped"

  # Job 5: Security Scan
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📥 Install dependencies
      run: npm ci
      
    - name: 🔒 Run npm audit
      run: npm audit --audit-level moderate
      
    - name: 🔍 Check for vulnerabilities
      run: npx audit-ci --moderate || echo "Audit completed with warnings"
      
    - name: 🔍 Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
        
    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Job 6: Notification
  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [lint, test, build, docker, security]
    if: always()
    
    steps:
    - name: 📢 Notify success
      if: needs.lint.result == 'success' && needs.test.result == 'success' && needs.build.result == 'success' && needs.docker.result == 'success' && needs.security.result == 'success'
      run: |
        echo "✅ All CI checks passed successfully!"
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref_name }}"
        
    - name: 📢 Notify failure
      if: needs.lint.result == 'failure' || needs.test.result == 'failure' || needs.build.result == 'failure' || needs.docker.result == 'failure' || needs.security.result == 'failure'
      run: |
        echo "❌ CI checks failed!"
        echo "Lint: ${{ needs.lint.result }}"
        echo "Tests: ${{ needs.test.result }}"
        echo "Build: ${{ needs.build.result }}"
        echo "Docker: ${{ needs.docker.result }}"
        echo "Security: ${{ needs.security.result }}"
        exit 1