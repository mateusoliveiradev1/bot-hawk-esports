name: Release Management

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean
      draft:
        description: 'Create as draft release'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'

jobs:
  # Job 1: Validate Release
  validate:
    name: 🔍 Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      changelog: ${{ steps.changelog.outputs.changelog }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📋 Extract version info
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
            # Check if it's a pre-release (contains alpha, beta, rc)
            if [[ $VERSION =~ (alpha|beta|rc) ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          echo "Pre-release: $IS_PRERELEASE"

      - name: 📝 Generate changelog
        id: changelog
        run: |
          echo "Generating changelog for ${{ steps.version.outputs.version }}..."

          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [[ -n "$PREVIOUS_TAG" ]]; then
            echo "Previous tag: $PREVIOUS_TAG"
            CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD)
          else
            echo "No previous tag found, using all commits"
            CHANGELOG=$(git log --pretty=format:"- %s")
          fi

          # Save changelog to file and output
          echo "$CHANGELOG" > changelog.md
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 📤 Upload changelog
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: changelog.md
          retention-days: 7

  # Job 2: Run Tests
  test:
    name: 🧪 Run Release Tests
    uses: ./.github/workflows/ci.yml
    needs: validate

  # Job 3: Build Release Assets
  build-assets:
    name: 🏗️ Build Release Assets
    runs-on: ubuntu-latest
    needs: [validate, test]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Build project
        run: npm run build

      - name: 📦 Create release archives
        run: |
          # Create source archive
          git archive --format=zip --prefix=hawk-esports-bot-${{ needs.validate.outputs.version }}/ HEAD > hawk-esports-bot-${{ needs.validate.outputs.version }}-source.zip

          # Create binary archive
          zip -r hawk-esports-bot-${{ needs.validate.outputs.version }}-binary.zip \
            dist/ \
            package.json \
            package-lock.json \
            prisma/ \
            docker-compose.yml \
            Dockerfile \
            monitoring/ \
            scripts/ \
            docs/ \
            .env.example \
            README.md \
            LICENSE

          # Create checksums
          sha256sum hawk-esports-bot-${{ needs.validate.outputs.version }}-*.zip > checksums.txt

      - name: 📤 Upload release assets
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: |
            hawk-esports-bot-${{ needs.validate.outputs.version }}-*.zip
            checksums.txt
          retention-days: 30

  # Job 4: Create GitHub Release
  create-release:
    name: 🚀 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, test, build-assets]
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      release_url: ${{ steps.create_release.outputs.html_url }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download changelog
        uses: actions/download-artifact@v4
        with:
          name: changelog

      - name: 📥 Download release assets
        uses: actions/download-artifact@v4
        with:
          name: release-assets

      - name: 📝 Prepare release notes
        id: release_notes
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          IS_PRERELEASE="${{ needs.validate.outputs.is_prerelease }}"

          # Read changelog
          CHANGELOG=$(cat changelog.md)

          # Create release notes
          cat > release_notes.md << EOF
          ## 🚀 Hawk Esports Bot $VERSION

          ### 📋 What's Changed
          $CHANGELOG

          ### 🐳 Docker Image
          \`\`\`bash
          docker pull ghcr.io/${{ github.repository }}:$VERSION
          \`\`\`

          ### 📦 Installation

          #### Using Docker Compose
          \`\`\`bash
          # Download the release
          wget https://github.com/${{ github.repository }}/releases/download/$VERSION/hawk-esports-bot-$VERSION-binary.zip
          unzip hawk-esports-bot-$VERSION-binary.zip
          cd hawk-esports-bot-$VERSION

          # Configure environment
          cp .env.example .env
          # Edit .env with your configuration

          # Start the bot
          docker-compose up -d
          \`\`\`

          #### Manual Installation
          \`\`\`bash
          # Download and extract
          wget https://github.com/${{ github.repository }}/releases/download/$VERSION/hawk-esports-bot-$VERSION-binary.zip
          unzip hawk-esports-bot-$VERSION-binary.zip
          cd hawk-esports-bot-$VERSION

          # Install dependencies
          npm install --production

          # Configure environment
          cp .env.example .env
          # Edit .env with your configuration

          # Start the bot
          npm start
          \`\`\`

          ### 🔍 Verification
          Verify the integrity of downloaded files:
          \`\`\`bash
          sha256sum -c checksums.txt
          \`\`\`

          ### 📊 Monitoring
          Access the monitoring dashboard at: http://localhost:3000 (Grafana)

          ### 🆘 Support
          - [Documentation](https://github.com/${{ github.repository }}/tree/main/docs)
          - [Issues](https://github.com/${{ github.repository }}/issues)
          - [Discussions](https://github.com/${{ github.repository }}/discussions)

          ---

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "initial")...$VERSION
          EOF

      - name: 🚀 Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate.outputs.version }}
          release_name: ${{ needs.validate.outputs.version }}
          body_path: release_notes.md
          draft: ${{ github.event.inputs.draft || false }}
          prerelease: ${{ needs.validate.outputs.is_prerelease }}

      - name: 📤 Upload source archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./hawk-esports-bot-${{ needs.validate.outputs.version }}-source.zip
          asset_name: hawk-esports-bot-${{ needs.validate.outputs.version }}-source.zip
          asset_content_type: application/zip

      - name: 📤 Upload binary archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./hawk-esports-bot-${{ needs.validate.outputs.version }}-binary.zip
          asset_name: hawk-esports-bot-${{ needs.validate.outputs.version }}-binary.zip
          asset_content_type: application/zip

      - name: 📤 Upload checksums
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./checksums.txt
          asset_name: checksums.txt
          asset_content_type: text/plain

  # Job 5: Deploy Release
  deploy:
    name: 🚀 Deploy Release
    uses: ./.github/workflows/deploy.yml
    needs: [validate, create-release]
    with:
      environment: production
      version: ${{ needs.validate.outputs.version }}
    secrets: inherit

  # Job 6: Post-release Tasks
  post-release:
    name: 📊 Post-release Tasks
    runs-on: ubuntu-latest
    needs: [validate, create-release, deploy]
    if: always() && needs.create-release.result == 'success'

    steps:
      - name: 📊 Update release metrics
        run: |
          echo "📊 Release metrics updated!"
          echo "Version: ${{ needs.validate.outputs.version }}"
          echo "Release ID: ${{ needs.create-release.outputs.release_id }}"
          echo "Release URL: ${{ needs.create-release.outputs.release_url }}"
          echo "Pre-release: ${{ needs.validate.outputs.is_prerelease }}"
          echo "Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"

      - name: 📢 Notify release completion
        run: |
          echo "🎉 Release ${{ needs.validate.outputs.version }} completed successfully!"
          echo "🔗 Release URL: ${{ needs.create-release.outputs.release_url }}"

      - name: 🧹 Cleanup artifacts
        run: |
          echo "🧹 Cleaning up temporary artifacts..."
          echo "✅ Cleanup completed!"

  # Job 7: Rollback (if needed)
  rollback:
    name: 🔄 Rollback Release
    runs-on: ubuntu-latest
    needs: [validate, create-release, deploy]
    if: failure() && needs.create-release.result == 'success'

    steps:
      - name: 🔄 Rollback release
        run: |
          echo "🔄 Rolling back release ${{ needs.validate.outputs.version }}..."
          echo "This would typically involve:"
          echo "- Marking the release as draft"
          echo "- Reverting deployment"
          echo "- Notifying stakeholders"

      - name: 📢 Notify rollback
        run: |
          echo "📢 Release ${{ needs.validate.outputs.version }} has been rolled back"
          echo "Reason: Deployment or post-release checks failed"
          echo "Timestamp: $(date -u +"%Y-%m-%dT%H:%M:%SZ")"
